
try
	" Pathogen
	execute pathogen#infect()

	" Vim-Go
    " git clone https://github.com/fatih/vim-go.git ~/.vim/bundle/vim-go
	" https://github.com/fatih/vim-go
	" No need to add anything. It's already in ~/.vim/bundle
	let g:go_highlight_fields    = 1
	let g:go_highlight_types     = 1
	let g:go_highlight_functions = 1
	let g:go_highlight_methods   = 1
	let g:go_fmt_command = "goimports"
	filetype plugin on

	" Vim-Terraform
    " for syntax highlighting
	" git clone https://github.com/hashivim/vim-terraform ~/.vim/bundle/vim-terraform
	let g:terraform_align=1
	let g:terraform_fmt_on_save=1


	" Vim-HCLfmt
	" for auto-formatting
	" git clone git@github.com:fatih/vim-hclfmt.git ~/.vim/bundle/vim-hclfmt
	"
	" Need one of these forks:
	" https://github.com/fatih/hclfmt/network
    " go install github.com/2nick/hclfmt
	let g:hcl_fmt_autosave = 1
	let g:tf_fmt_autosave = 0
	let g:nomad_fmt_autosave = 1

	" Airline
	" git clone https://github.com/vim-airline/vim-airline ~/.vim/bundle/vim-airline
	" git clone https://github.com/vim-airline/vim-airline-themes ~/.vim/bundle/vim-airline-themes
	" Theme
	let g:airline_theme='violet'
catch
endtry

" Use clipboard
set clipboard=unnamed

" We have colours
set t_Co=256

" Enable syntax highlighting
syntax on

" Nomad Syntax Highlighting
au BufReadPost *.nomad set syntax=hcl

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Display line numbers on the left
set number

" Show tab-bar always
set showtabline=2

" Tab navigation
nnoremap <F9>  gT
nnoremap <F10> gt
set tabpagemax=100

" Quick mouse toggle
map <F6> :set mouse=a<CR>
map <F7> <C-C>:set mouse=<CR>

" Tab colors
" Colors from https://github.com/vim-airline/vim-airline-themes/blob/master/autoload/airline/themes/violet.vim
hi TabLineFill ctermfg=239  ctermbg=250
hi TabLineSel  ctermfg=250 ctermbg=97
hi TabLine     ctermfg=250 ctermbg=239

" Tabs are 4 spaces
set tabstop=4
set shiftwidth=4
set softtabstop=4

" display hidden chars
set list listchars=tab:.\ ,trail:$

" highlight search results
set hlsearch

" allow deletion of indent, eol and anything which wasn't added in this vim session
set backspace=2




" Don't save a backup of crontabs
" http://calebthompson.io/crontab-and-vim-sitting-in-a-tree/
autocmd filetype crontab setlocal nobackup nowritebackup




set showmode  showcmd  cmdheight=1
set laststatus=2           " always show statusline

highlight StatusLine NONE ctermbg=233 ctermfg=White cterm=NONE
if has("statusline")
	set statusline =          " clear
	set statusline+=%r        " read only flag '[RO]'
	"set statusline+=%h        " help flag '[Help]'
	set statusline+=%=        " left/right separation point
	set statusline+=\ %c      " column number
	set statusline+=%V        " virtual column '-{n}'
	set statusline+=:%l/%L    " line/lines
	set statusline+=\ %p%%    " percent of file
endif



" Commenting blocks of code.
autocmd FileType c,cpp,java,scala let b:comment_leader = '// '
autocmd FileType go               let b:comment_leader = '// '
autocmd FileType sh,ruby,python   let b:comment_leader = '# '
autocmd FileType conf,fstab,hcl   let b:comment_leader = '# '
autocmd FileType yaml             let b:comment_leader = '#'
autocmd FileType tf               let b:comment_leader = '#'
autocmd FileType Dockerfile       let b:comment_leader = '# '
autocmd FileType tex              let b:comment_leader = '% '
autocmd FileType mail             let b:comment_leader = '> '
autocmd FileType vim              let b:comment_leader = '" '
noremap <silent> ,cc :<C-B>silent <C-E>s/^/<C-R>=escape(b:comment_leader,'\/')<CR>/<CR>:nohlsearch<CR>
" TODO: with vim-go enabled, this doesn't work for go yet
noremap <silent> ,cu :<C-B>silent <C-E>s/^\V<C-R>=escape(b:comment_leader,'\/')<CR>//e<CR>:nohlsearch<CR>


" from http://vim.wikia.com/wiki/Have_Vim_check_automatically_if_the_file_has_changed_externally
" If you are using a console version of Vim, or dealing
" with a file that changes externally (e.g. a web server log)
" then Vim does not always check to see if the file has been changed.
" The GUI version of Vim will check more often (for example on Focus change),
" and prompt you if you want to reload the file.
"
" There can be cases where you can be working away, and Vim does not
" realize the file has changed. This command will force Vim to check
" more often.
"
" Calling this command sets up autocommands that check to see if the
" current buffer has been modified outside of vim (using checktime)
" and, if it has, reload it for you.
"
" This check is done whenever any of the following events are triggered:
" * BufEnter
" * CursorMoved
" * CursorMovedI
" * CursorHold
" * CursorHoldI
"
" In other words, this check occurs whenever you enter a buffer, move the cursor,
" or just wait without doing anything for 'updatetime' milliseconds.
"
" Normally it will ask you if you want to load the file, even if you haven't made
" any changes in vim. This can get annoying, however, if you frequently need to reload
" the file, so if you would rather have it to reload the buffer *without*
" prompting you, add a bang (!) after the command (WatchForChanges!).
" This will set the autoread option for that buffer in addition to setting up the
" autocommands.
"
" If you want to turn *off* watching for the buffer, just call the command again while
" in the same buffer. Each time you call the command it will toggle between on and off.
"
" WatchForChanges sets autocommands that are triggered while in *any* buffer.
" If you want vim to only check for changes to that buffer while editing the buffer
" that is being watched, use WatchForChangesWhileInThisBuffer instead.
"
command! -bang WatchForChanges                  :call WatchForChanges(@%,  {'toggle': 1, 'autoread': <bang>0})
command! -bang WatchForChangesWhileInThisBuffer :call WatchForChanges(@%,  {'toggle': 1, 'autoread': <bang>0, 'while_in_this_buffer_only': 1})
command! -bang WatchForChangesAllFile           :call WatchForChanges('*', {'toggle': 1, 'autoread': <bang>0})
" WatchForChanges function
"
" This is used by the WatchForChanges* commands, but it can also be
" useful to call this from scripts. For example, if your script executes a
" long-running process, you can have your script run that long-running process
" in the background so that you can continue editing other files, redirects its
" output to a file, and open the file in another buffer that keeps reloading itself
" as more output from the long-running command becomes available.
"
" Arguments:
" * bufname: The name of the buffer/file to watch for changes.
"     Use '*' to watch all files.
" * options (optional): A Dict object with any of the following keys:
"   * autoread: If set to 1, causes autoread option to be turned on for the buffer in
"     addition to setting up the autocommands.
"   * toggle: If set to 1, causes this behavior to toggle between on and off.
"     Mostly useful for mappings and commands. In scripts, you probably want to
"     explicitly enable or disable it.
"   * disable: If set to 1, turns off this behavior (removes the autocommand group).
"   * while_in_this_buffer_only: If set to 0 (default), the events will be triggered no matter which
"     buffer you are editing. (Only the specified buffer will be checked for changes,
"     though, still.) If set to 1, the events will only be triggered while
"     editing the specified buffer.
"   * more_events: If set to 1 (the default), creates autocommands for the events
"     listed above. Set to 0 to not create autocommands for CursorMoved, CursorMovedI,
"     (Presumably, having too much going on for those events could slow things down,
"     since they are triggered so frequently...)
function! WatchForChanges(bufname, ...)
  " Figure out which options are in effect
  if a:bufname == '*'
    let id = 'WatchForChanges'.'AnyBuffer'
    " If you try to do checktime *, you'll get E93: More than one match for * is given
    let bufspec = ''
  else
    if bufnr(a:bufname) == -1
      echoerr "Buffer " . a:bufname . " doesn't exist"
      return
    end
    let id = 'WatchForChanges'.bufnr(a:bufname)
    let bufspec = a:bufname
  end
  if len(a:000) == 0
    let options = {}
  else
    if type(a:1) == type({})
      let options = a:1
    else
      echoerr "Argument must be a Dict"
    end
  end
  let autoread    = has_key(options, 'autoread')    ? options['autoread']    : 0
  let toggle      = has_key(options, 'toggle')      ? options['toggle']      : 0
  let disable     = has_key(options, 'disable')     ? options['disable']     : 0
  let more_events = has_key(options, 'more_events') ? options['more_events'] : 1
  let while_in_this_buffer_only = has_key(options, 'while_in_this_buffer_only') ? options['while_in_this_buffer_only'] : 0
  if while_in_this_buffer_only
    let event_bufspec = a:bufname
  else
    let event_bufspec = '*'
  end
  let reg_saved = @"
  "let autoread_saved = &autoread
  let msg = "\n"
  " Check to see if the autocommand already exists
  redir @"
    silent! exec 'au '.id
  redir END
  let l:defined = (@" !~ 'E216: No such group or event:')
  " If not yet defined...
  if !l:defined
    if l:autoread
      let msg = msg . 'Autoread enabled - '
      if a:bufname == '*'
        set autoread
      else
        setlocal autoread
      end
    end
    silent! exec 'augroup '.id
      if a:bufname != '*'
        "exec "au BufDelete    ".a:bufname . " :silent! au! ".id . " | silent! augroup! ".id
        "exec "au BufDelete    ".a:bufname . " :echomsg 'Removing autocommands for ".id."' | au! ".id . " | augroup! ".id
        exec "au BufDelete    ".a:bufname . " execute 'au! ".id."' | execute 'augroup! ".id."'"
      end
        exec "au BufEnter     ".event_bufspec . " :checktime ".bufspec
        exec "au CursorHold   ".event_bufspec . " :checktime ".bufspec
        exec "au CursorHoldI  ".event_bufspec . " :checktime ".bufspec
      " The following events might slow things down so we provide a way to disable them...
      " vim docs warn:
      "   Careful: Don't do anything that the user does
      "   not expect or that is slow.
      if more_events
        exec "au CursorMoved  ".event_bufspec . " :checktime ".bufspec
        exec "au CursorMovedI ".event_bufspec . " :checktime ".bufspec
      end
    augroup END
    let msg = msg . 'Now watching ' . bufspec . ' for external updates...'
  end
  " If they want to disable it, or it is defined and they want to toggle it,
  if l:disable || (l:toggle && l:defined)
    if l:autoread
      let msg = msg . 'Autoread disabled - '
      if a:bufname == '*'
        set noautoread
      else
        setlocal noautoread
      end
    end
    " Using an autogroup allows us to remove it easily with the following
    " command. If we do not use an autogroup, we cannot remove this
    " single :checktime command
    " augroup! checkforupdates
    silent! exec 'au! '.id
    silent! exec 'augroup! '.id
    let msg = msg . 'No longer watching ' . bufspec . ' for external updates.'
  elseif l:defined
    let msg = msg . 'Already watching ' . bufspec . ' for external updates'
  end
  echo msg
  let @"=reg_saved
endfunction


" http://vim.wikia.com/wiki/Modeline_magic
set modeline
set modelines=5


" f to fold/unfold
nnoremap f za
" start with everything unfolded
set foldlevel=99


" Tab complete my commands!
set wildmenu
au BufNewFile,BufRead Jenkinsfile setf groovy
