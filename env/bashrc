#!/bin/bash

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

export PATH=/opt/homebrew/bin/:$PATH
eval "$(brew shellenv)"


#
# Presentation Mode
#

function pres(){
	case $1 in
		on)
			touch ~/.config/lmhd/presentation_mode
			;;
		off)
			rm ~/.config/lmhd/presentation_mode
			;;
		*)
			echo "Usage: pres [on|off]"
			return
			;;
	esac
	clear

	# Really, you need a bash session
	# otherwise Git Prompt overrides PS1
	source $HOME/.bashrc
}
if [ -f ~/.config/lmhd/presentation_mode ]; then
	PRESENTATION_MODE=true
else
	PRESENTATION_MODE=false
fi

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

if [ -f ~/.bash_box_specific ]; then
    . ~/.bash_box_specific
fi

vault_ps1() {
	VAULT_ADDR_DISPLAY=${VAULT_ADDR}

	if test -f ~/.config/lmhd/vault-ps1; then
		token_lookup=$(vault read --format=json auth/token/lookup-self 2>/dev/null)

		# If we're logged in to Vault, include this prefix
		display_name=$(echo ${token_lookup} | jq -r .data.display_name 2>/dev/null)
		meta_role=$(echo ${token_lookup} | jq -r .data.meta.role 2>/dev/null)


		if [[ "${display_name}" != "" && "${display_name}" != "null" ]]; then
			if [[ "${meta_role}" != "" && "${meta_role}" != "null" ]]; then
				display_name="${display_name}/${meta_role} @ "
			else
				display_name="${display_name} @ "
			fi
		fi

		if [[ "${VAULT_NAMESPACE}" == "" ]]; then
			echo -e " \e[93m(V|${display_name}${VAULT_ADDR_DISPLAY})\e[m"
		else
			echo -e " \e[93m(V|${display_name}${VAULT_ADDR_DISPLAY} / ${VAULT_NAMESPACE})\e[m"
		fi
	fi

	# TODO: helper script to get vault user
	# (don't want to do this inline)
	#
	# Thinking have a directory somewhere (dev_utils/bin/prompts/ perhaps)
	# then bashrc should find all of those, and add them all to GIT_PROMPT_START
}
alias vaulton="touch ~/.config/lmhd/vault-ps1"
alias vaultoff="rm -f ~/.config/lmhd/vault-ps1"

tf_ps1() {
	if test -f ~/.config/lmhd/tf-ps1; then
		# TODO: Check if we're in a TF workspace?

		# TODO: get TFC URL and Org
		echo -e " \e[95m(TF|$(terraform workspace show))\e[m"
	fi
}
alias tfon="touch ~/.config/lmhd/tf-ps1"
alias tfoff="rm -f ~/.config/lmhd/tf-ps1"

aws_ps1() {
	if test -f ~/.config/lmhd/aws-ps1; then
		echo -e " \e[33m(AWS|$(aws sts get-caller-identity | jq -r .Arn))\e[m"
	fi
}
alias awson="touch ~/.config/lmhd/aws-ps1"
alias awsoff="rm -f ~/.config/lmhd/aws-ps1"


frd_ps1() {
	tmpdir=/tmp/lmhd/dev-utils/
	lockfile=${tmpdir}/frd.lock
	if [ -f $lockfile ]; then
		echo -e " \e[34m(frd:running)\e[m"
		return
	fi

	frcdfile=${tmpdir}/frcd
	if [ -f $frcdfile ]; then
		# We have an frcd file, so don't output anything
		return
	fi

	echo -e " \e[31m(frd:none)\e[m"
}

if $PRESENTATION_MODE; then
	# Docker mode
	#PS1="\nüê≥  \W lucy $ "

	# Gay Mode
	#PS1="\nüè≥Ô∏è‚Äçüåà  \W lucy $ "
	# PS1="\nüåà  \W lucy $ "
	PS1="\nüåà  \W strawb $ "

	# Boring mode
	#export PS1="\n $ "


	#imgcat ~/git_src/dev_utils/img/strawberry.png

	# UGUU ANIME MODE
	#export PS1="\n(„Å•ÔΩ°‚óï‚Äø‚Äø‚óïÔΩ°)„Å• üåà  \W lucy $ "
else
	if [ -z "${LMHD_GIT_PROMPT_SKIP}" ]; then
		if [ -f "$(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh" ]; then
			#GIT_PROMPT_ONLY_IN_REPO=1
			GIT_PROMPT_THEME=Solarized

			# If we've not set a custom "hostname" for display in the prompt, use actual hostname
			if [ -z $DISPLAY_HOSTNAME ]; then
				DISPLAY_HOSTNAME="\h"
			fi

			# Prompt start
			# Was last command successful?
			GIT_PROMPT_START="\n_LAST_COMMAND_INDICATOR_ "
				# Where am I?
				GIT_PROMPT_START="${GIT_PROMPT_START}${debian_chroot:+($debian_chroot)}"
				GIT_PROMPT_START="${GIT_PROMPT_START}\[\033[01;32m\]\u@${DISPLAY_HOSTNAME}\[\033[00m\] \[\033[01;34m\]\w\[\033[00m\]"

			# Vault
			GIT_PROMPT_START="${GIT_PROMPT_START}\$(vault_ps1)\$(tf_ps1)\$(aws_ps1)\$(frd_ps1)"

			# TODO: Vault/Kube/Nomad/Consul/etc.

			GIT_PROMPT_END="\n$ "
			GIT_PROMPT_FETCH_REMOTE_STATUS=1

			GIT_PROMPT_SHOW_UPSTREAM=1

			source "$(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh"
		fi
	fi
fi

complete -C /usr/local/bin/nomad nomad
