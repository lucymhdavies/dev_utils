#!/bin/bash

~/git_src/dev_utils/bin/imgcat ~/git_src/dev_utils/img/trans-gopher.png

if [ -f ~/.presentation_mode ]; then
	PRESENTATION_MODE=true

	PS1="🐳 :\W lucy $ "


	#imgcat ~/git_src/dev_utils/img/strawberry.png

	# UGUU ANIME MODE
	#PS1="(づ｡◕‿‿◕｡)づ 🌈  :\W lucy $ "
else
	PRESENTATION_MODE=false
fi


if [ -f ~/.bash_debug_log ]; then
	BASH_DEBUG_LOGGING=true
fi
function bashdebug() {
	if [[ $BASH_DEBUG_LOGGING == true ]]; then
		echo $*
	fi
}

bashdebug "LUCYTIME ALIASES 1 $(date)"

# Bash Aliases is kinda a misnomer, because this file contains a bunch of other stuff too

# Dependencies:
# Homebrew

if [[ $(compgen -c | grep ^brew$ | wc -l) -ne 0 ]]; then
	has_brew=true
fi

# TODO: store status of these in ~/.bash_dependencies for example, so we're not relying on compgen
# Install dependencies
# TODO: This should be `brew install lucybash`
# for c in fzf coreutils jq gsort thefuck; do
# 	if $has_brew && ( [[ $(compgen -c | grep ^$c$ | wc -l) -eq 0 ]] && [[ $(brew list | grep ^$c$ | wc -l) -eq 0 ]] ); then
# 		echo "Installing $c"
# 		brew install $c
# 	fi
# done

bashdebug "LUCYTIME ALIASES 2 $(date)"


alias trains="while : ; do sl; done"


# Eternal bash history.
# ---------------------
if [ ! -f ~/.bash_eternal_history ]; then
	echo "Welcome to Unlimited History Mode!"
	mv ~/.bash_history ~/.bash_eternal_history
fi
# Undocumented feature which sets the size to "unlimited".
# http://stackoverflow.com/questions/9457233/unlimited-bash-history
export HISTSIZE=
export HISTFILESIZE=
export HISTCONTROL=ignoreboth
export HISTTIMEFORMAT="[%F %T] "

# append to the history file, don't overwrite it
shopt -s histappend

# Change the file location because certain bash sessions truncate .bash_history file upon close.
# http://superuser.com/questions/575479/bash-history-truncated-to-500-lines-on-each-login
export HISTFILE=~/.bash_eternal_history




export PATH=$PATH:.
export PATH=$PATH:~/bin
export PATH=$PATH:~/git_src/dev_utils/bin

is_osx=`uname | grep -i darwin | wc -l`

# git init
alias ssh_init="eval \`ssh-agent -s\` ; ssh-add ~/.ssh/lucy.lucymhdavies.com"

# bash stuff
alias realias="source ~/.bash_aliases"
function analyse_bashrc {
	grep --color=yes -n $1 ~/.bash* | grep -v ".bash*history" | grep -v ".bash_history" | grep -v ".bash_eternal_history"
}
alias rebash="source ~/.bashrc"

# vim stuff
alias vi="vim -p"
alias vim="vim -p"
alias view="vim -R"
export EDITOR=vim
alias vibash="vim ~/.bashrc"
alias vialiases="vim ~/.bash_aliases; realias"; alias vialias=vialiases
# because when you use vim a lot, you expect :q to be quit
alias :q="exit"
alias :Q="exit"
alias :wq="exit"

# git aliases
alias gdiff="git diff --color"
alias gpush="git push -u"
alias gfetch="git fetch --all"
alias gpull="git pull"
alias gcom="git commit"
alias gadd="git add"
alias gco="git checkout"
function gcop {
	git checkout $@
	git pull
}
alias gb="gco -b"
alias gstatus="git status"
alias gbranch="git branch -avv"
alias gpom="git push origin master"
alias gphm="git push heroku master"
alias gpho="gphm; gpom"
alias gpot="echo -------------------- ; echo you mean gpoh, right? ; echo --------------------; snark ; gpoh"
alias gpoh="git push origin HEAD -u"
alias gdiagram="git log --graph --color --decorate --oneline --all"
alias gadint="git add --interactive"
alias gmlog="git log -m -M --first-parent -p"
alias gignored="git ls-files . --ignored --exclude-standard --others"

if [ $is_osx -eq 1 ] ; then
	alias copy-git-remote-url="git remote get-url origin | pbcopy"
fi

alias git_clean_branches="git fetch -p && for branch in \$(git branch -vv | grep ': gone]' | awk '{print \$1}'); do git branch -D \$branch; done"

function git-set-upstream {
	my_branch=`git rev-parse --abbrev-ref HEAD`

	echo "Set upstream branch of $my_branch to origin/$my_branch?" ; read

	git branch --set-upstream-to=origin/$my_branch $my_branch
}
alias gsetup=git-set-upstream


alias copy="rsync -z -r -v -h --progress"
alias move="rsync -z -r -v -h --progress --remove-source-files"
alias c="clear"
alias df="df -h"
alias color_less="less -r"

alias grin="grep -rin --color=auto --exclude-dir='.git' --exclude-dir='.kitchen'"
function g {
	grin "$@" .
}
alias gc="g --color=yes"
alias gl="g -l --color=no"
function vigl {
	vim `gl "$@"`
}


# disk usage
alias dush="du -sh"
if [ $is_osx -eq 0 ] ; then
	#TODO: Don't use is_osx to decide which sort to use
	#      Use which sort and which gsort instead
	#      Alternatively, alias sort as gsort
	alias dusort="du --max-depth=1 -h | sort -h"
	alias duh="du --max-depth=1 -h"
else
	# if there is a gsort
	compgen -c | grep gsort >/dev/null
	RESULT=$?
	if [ $RESULT -eq 0 ]; then
		alias dusort="du -d 1 -h | gsort -h"
		alias watch_dusort="watch 'du -d 1 -h | gsort -h'"
	else
		alias dusort="echo dusort needs gsort. brew install coreutils should fix that"
	fi
	alias duh="du -d 1 -h"
fi
alias fileshere="find | wc -l"
alias how_many_files="find | wc -l"


# archive/unarchive
function archivedir {
	d=`echo $1 | sed -e 's#/$##'`

	tar -zcvf $d.tar.gz $d
	du -sh $d
	du -sh $d.tar.gz

	echo "Delete $d?" ; read
	echo "Deleting"
	rm -rf $d
}
alias ad="archivedir"

function unarchivedir {
	tar -zxvf $1

	echo "Delete $1?" ; read
	echo "Deleting"
	rm $1
}
alias uad="unarchivedir"


alias quota="quota -s"
alias grep="grep --color=auto"


if [ $is_osx -eq 0 ] ; then
	alias ls="ls --color=auto"
else
	alias ls="ls -G"
fi
alias ll="ls -lh"


# toggle variable between 0 and 1
var_toggle()
{
    eval "_VAR_TOGGLE=\$$1"
    [ ${_VAR_TOGGLE:-0} = ${3:-0} ] &&
                 _VAR_TOGGLE=${2:-1} ||
              _VAR_TOGGLE=${3:-0}
    eval "$1=\$_VAR_TOGGLE"
}

bashdebug "LUCYTIME ALIASES 3 $(date)"

# be case insensitive when you tab complete
#bind "set completion-ignore-case on"
ignore_case=1
function toggle_ignore_case()
{
	var_toggle ignore_case

	if [ "$ignore_case" == "0" ]; then
		echo "Turning off ignore case"
		bind "set completion-ignore-case off"
	else
		echo "Turning on ignore case"
	bind "set completion-ignore-case on"
	fi
}


alias mkdir="mkdir -p"
function mkcd {
    mkdir -p "$1"
    cd "$1"
}


alias untar_tar.bz2="tar -xjf"
alias tar_tar.bz2="tar -cjf"
# if bar exists, use it
if hash bar 2>/dev/null; then
	function untar_tgz {
		bar -n "$@" | tar -xzf -
	}
	function untar_tar.gz {
		bar -n "$@" | tar -xf -
	}
else
	alias untar_tgz="tar -xzf"
	alias untar_tar.gz="tar -xf"
fi
alias tar_tgz="tar -czf"
alias unjar="jar xf"


alias myip="curl -s icanhazip.com"


if [ $is_osx -eq 0 ] ; then
	alias apt-get="sudo apt-get"
	alias agi="sudo apt-get install"
fi

# GNU Screen Stuff
alias screenlist="screen -list"
alias lsc="screenlist"
alias rescreen="screen -x"
alias resc="rescreen"
function kill_screen {
	screen -S $1 -p 0 -X quit
}


alias add_tab_start="sed 's/^/\t/g'"


alias edot="echo -n ."
alias eline40="echo =============================="
alias eline80="echo ============================================================"


# preappend timestamp to start of line
alias timestamp_line="awk '{ print strftime(\"%Y-%m-%d %H:%M:%S\t\"), \$0; fflush(); }'"
alias tsl=timestamp_line


# push ssh key to server
# TODO: specify which key to push
function push-key {
	ssh -q $1 "mkdir -p ~/.ssh/ && echo '`cat ~/.ssh/id_rsa.pub`' >> ~/.ssh/authorized_keys && cat .ssh/authorized_keys | sort -u > .ssh/authorized_keys.new && mv .ssh/authorized_keys.new .ssh/authorized_keys"
}

# Some more OS X specific stuff
if [ $is_osx -eq 1 ] ; then
	alias app='open -a' # usage: 'app itunes' will open itunes, mac only

	# QuickLook from the command line
	# Display files in Quick Look
	function ql () {
		(qlmanage -p "$@" > /dev/null 2>&1 &
		local ql_pid=$!
		read -sn 1
		kill ${ql_pid}) > /dev/null 2>&1
	}
	# Display any filetype as plain text
	function qlt () {
		(qlmanage -p -c public.plain-text "$@" > /dev/null 2>&1 &
		local ql_pid=$!
		read -sn 1
		kill ${ql_pid}) > /dev/null 2>&1
	}

	alias chrome='app "Google Chrome.app"'

	alias finder='app Finder .'

	alias meld="app Meld --args"
fi



# because all my environments are set up like this, I can do..
alias cdgit="cd ~/git_src" # a weird naming habit I picked up from OpenBet
alias vigit="vim ~/git_src/dev_utils/env/bash_aliases && source ~/git_src/dev_utils/env/bash_aliases"

# Useful for copypasting from the terminal, without all the fluff
alias simple_terminal="PS1='\n$ '"


# fun things
if [ $is_osx -eq 0 ] ; then
	myname=`finger | grep \`whoami\` | head -n1 | cut -d " " -f3`
else
	myname=`finger | grep \`whoami\` | head -n1 | cut -d " " -f6`
fi
alias splash='echo "$myname used Splash! But nothing happened!"'
alias voodoo-witchcraft='echo "$myname used Voodoo Witchcraft! But nothing happened!"'
alias tableflip='echo "(╯°□°)╯︵ ┻━┻"'


# rlwrap is useful
alias tclsh="rlwrap tclsh"


# diff commits from two different branches
function gbmeld {
	branch_file=/tmp/gbmeld_branch
	master_file=/tmp/gbmeld_masterlog

	git log master > $master_file
	git log $1     > $branch_file

	meld $branch_file $master_file

	rm $branch_file $master_file
}


alias ..="cd .."


# want to go straight to a new temp dir?
alias cdtmpnew="new_temp_dir=\$(mktemp -d) && cd ~/tmp/ >/dev/null && ln -s \$new_temp_dir . && cd ~/tmp/\$(basename \$new_temp_dir)"

# or just the ~/tmp directory, where files stick around for 7 days
alias cdtmp="cd ~/tmp"


# Dependency: git clone https://github.com/sivel/speedtest-cli.git
function speedtest() {
	git_url="git@github.com:sivel/speedtest-cli.git"
	scriptdir="$HOME/git_src/github.com/sivel/speedtest-cli"
	script="$scriptdir/speedtest.py"

	# TODO: if script does not exist, clone repo

	python $script --share | tee /tmp/speedtest.txt


	# TODO: only do this bit if in iterm
	share_img=$(cat /tmp/speedtest.txt | grep "Share results" | sed s/.*http/http/)

	curl $share_img > /tmp/speedtest.png 2>/dev/null

	imgcat /tmp/speedtest.png
}




# Scripts from this repo's bin dir
export PATH=~/git_src/dev_utils/bin:$PATH

function rename_remove_spaces {
	for f in * ; do
		mv "$f" $(echo $f | sed "s/ /_/g")
	done
}
alias rrs=rename_remove_spaces


# Trollface
if [ "$TERM_PROGRAM" == "iTerm.app" ] ; then
	alias snark="imgcat ~/git_src/dev_utils/img/trollface.png"
else
	alias snark="TROLOLOLOLOLOLOL!"
fi


alias dspace="du -d 0 -h ~/.docker"

# Quick docker-run something ephemerally
alias drun="docker run -it --rm"

# Docker for Mac's VM
alias docker_mac_vm="screen ~/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/tty"

function docker_cleanup {
	echo "=============================="
	echo "Space Before"
	echo "=============================="
	df -h

	echo "=============================="
	echo "Stopping all containers"
	echo "=============================="
	docker stop $(docker ps -a -q)

	echo "=============================="
	echo "Removing all containers"
	echo "=============================="
	docker rm -f $(docker ps -a -q)

	echo "=============================="
	echo "Removing all images"
	echo "=============================="
	docker rmi -f $(docker images -q)

	echo "=============================="
	echo "Space After"
	echo "=============================="
	df -h
}

if [ $is_osx -eq 1 ] ; then
	function docker_machine_cleanup {
		echo "=============================="
		echo "Space Before"
		echo "=============================="
		df -h

		echo "=============================="
		echo "Stoping all images"
		echo "=============================="
		docker-machine stop $(docker-machine ls -q)

		echo "=============================="
		echo "Deleting all images"
		echo "=============================="
		docker-machine rm $(docker-machine ls -q)
		
		echo "=============================="
		echo "Space After"
		echo "=============================="
		df -h
	}

	function docker_native_trim {
		dockers_running=$(ps -ef | grep Docker.app | grep -v grep | wc -l)
		if [[ $dockers_running -ne 0 ]]; then
			echo "Stop Docker.app first!"
			return 1
		fi

		DOCKER_VM=~/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/Docker.qcow2

		echo "=============================="
		echo "Space Before"
		echo "=============================="
		df -h

		echo "=============================="
		echo "Trimming Docker VM"
		echo "=============================="
		du -hs $DOCKER_VM
		echo

		mv $DOCKER_VM $DOCKER_VM.original
		qemu-img convert -O qcow2 $DOCKER_VM.original $DOCKER_VM
		rm $DOCKER_VM.original

		du -hs $DOCKER_VM

		echo "=============================="
		echo "Space After"
		echo "=============================="
		df -h
	}

	function docker_native_cleanup {
		dockers_running=$(ps -ef | grep Docker.app | grep -v grep | wc -l)
		if [[ $dockers_running -ne 0 ]]; then
			echo "Stop Docker.app first!"
			return 1
		fi

		DOCKER_VM=~/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/Docker.qcow2

		echo "=============================="
		echo "Space Before"
		echo "=============================="
		df -h
		echo
		du -hs $DOCKER_VM

		echo "=============================="
		echo "Deleting Docker VM"
		echo "=============================="
		rm $DOCKER_VM

		echo "=============================="
		echo "Space After"
		echo "=============================="
		df -h
	}
fi

#alias ctop='tab_title "ctop" ; docker run -ti --name ctop --rm -v /var/run/docker.sock:/var/run/docker.sock quay.io/vektorlab/ctop:latest ; tab_title'
alias ctop='tab_title "ctop" ; lucli ctop ; tab_title'


# Remove color codes
alias decolor="sed -r \"s:\x1B\[[0-9;]*[mK]::g\""

# pls
alias please=sudo


# one-off SSH
alias sshtmp="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"


# Clear + add empty lines
alias superclear="for i in \$(seq \$(tput lines)); do echo ' '; done ; clear"
# And just wipeout scrollback
alias clearscrollback="printf '\e]50;ClearScrollback\a'"

function hgrep() {
	history | fzf --reverse -i -q "$*"
}

function frcd() {
	# Old version(s)
	# f=$(find ~/repos/ ~/git_src/ -type d  -or -type l -maxdepth 2 -not -path "*/.git" -not -path "*/.git/*" 2>/dev/null | fzf -i -q "$@")
	# f=$(find ~/repos/ ~/git_src/ -type d  -or -type l -maxdepth 2 2>/dev/null | grep -v "\.git" | fzf --reverse -i -q "$@")

	# Find all directories which contain a ".git" directory
	if [[ ! -f "/tmp/frcd" ]]; then
		echo "loading..."
		frd
	fi

	f=$(cat /tmp/frcd | fzf --reverse -i -q "$@")
	# TODO: allow user to specify no parameter

	if [ -d "$f" ]; then
		cd $f
		return
	fi
	if [ -f "$f" ]; then
		cd $(dirname $f)
		return
	fi
}
function gocd() {
	if [[ ! -f "/tmp/gocd" ]]; then
		echo "loading..."
		frd
	fi

	f=$(cat /tmp/gocd | fzf --reverse -i -q "$@")

	if [ -d "$f" ]; then
		cd $f
		return
	fi
	if [ -f "$f" ]; then
		cd $(dirname $f)
		return
	fi
}
function gcof() {
	if [[ -z "$1" ]]; then
		b=$(git branch --all | sed 's/remotes\/origin\///' | grep -v "\->" | sed 's/\*/ /' | sort -u | fzf --reverse -i -m | awk '{ print $NF }')
	else
		b=$(git branch --all | sed 's/remotes\/origin\///' | grep -v "\->" | sed 's/\*/ /' | sort -u | fzf --reverse -i -q "$1" -m | awk '{ print $NF }')
	fi

	git checkout $b
}
function gcopf {
	gcof $@
	git pull
}
alias gcofp=gcopf

alias fish=asciiquarium

function countdown() {
	secs=$1
	while [ $secs -gt 0 ]; do
		echo -ne "\r$secs\033[0K"
		sleep 1
		: $((secs--))
	done
}

function ezclone() {
	# assumes cloning from a git@ url...

	# clone to git_src by default
	repo_base=~/git_src
	if [[ "$1" == "golang" ]]; then
		repo_base=$GOPATH/src
		shift
	fi

	repo=$1
	reponame=$(basename $repo .git)


	repodir=$repo_base/$(dirname $(echo $repo | sed 's/.*@//' | sed 's/:/\//'))

	if [ -d $repodir/$reponame ]; then
		echo "$reponame already exists!"
	else
		mkdir -p $repodir
		cd $repodir
		git clone $repo
	fi

	cd $repodir/$reponame
}

# iterm tab colors
alias tcol_red='echo -en "\033]6;1;bg;*;default\a\033]6;1;bg;red;brightness;255\a"'
alias tab_col_red=tcol_red
alias tcol_green='echo -en "\033]6;1;bg;*;default\a\033]6;1;bg;green;brightness;255\a"'
alias tab_col_green=tcol_green
alias tcol_reset='echo -en "\033]6;1;bg;*;default\a"'
alias tab_col_reset=tcol_reset
# And reset now, e.g. for opening a new window from a color tab
tab_col_reset

# iterm tab title
function t_title {
    echo -ne "\033]0;"$*"\007"
}
alias tab_title=t_title # because I could never remember t_title



# Notify on oncommitted changes to dev_utils, and other such updates
# Updated with cron
# Kinda like a user-specific motd

if ! $PRESENTATION_MODE; then
	if [ -d /tmp/lmhd/dev-utils/updates/ ]; then
		if [ -n "$(ls -A /tmp/lmhd/dev-utils/updates/)" ]; then
			echo
			echo ================================================================================
			echo Updates worthy of your attention
			echo ================================================================================
			find "/tmp/lmhd/dev-utils/updates/" -type f -exec cat {} \;
			echo ================================================================================
			echo
		fi
	fi
fi


# FUCK
eval "$(thefuck --alias)"


# WAT

function what {
  while [ "$1" != "is" ]; do
    shift
  done
  if [ "$1" != "is" ]; then
    echo "Usage: what [...] is [args]" 1>&2
    exit -1
  fi
  shift
  man "$@"
}


alias luclidev="go run ~/go/src/github.com/lmhd/lucli/*.go"
alias staticlidev="go run ~/go/src/github.com/staticli/staticli/*.go"


# Heroku Autocomplete

# heroku autocomplete setup
HEROKU_AC_BASH_SETUP_PATH=$HOME/Library/Caches/heroku/autocomplete/bash_setup && test -f $HEROKU_AC_BASH_SETUP_PATH && source $HEROKU_AC_BASH_SETUP_PATH;


# cd to bookmarked directory
alias cdbset="echo \$PWD > ~/tmp/cdb"
alias cdb="touch ~/tmp/cdb && cd \$(cat ~/tmp/cdb)"
